module Panier :

inputoutput REMPLIR : integer;
inputoutput PANIER_PLEIN : integer;
inputoutput VIDER;

var x := -1 : integer in	% x := -1 n'est pas util si ?REMPLIR >= 0
   loop				% sinon ca demarre necessairement avec x = -1
      await immediate REMPLIR;
      x := ?REMPLIR;
      abort
         sustain PANIER_PLEIN(x)
      when VIDER;
      x := -1			% x := -1 n'est pas util si ?REMPLIR >= 0
   end loop
end var

end module

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

module Panier_FIN :

inputoutput  REMPLIR_FIN : integer, FIN : integer;
inputoutput PANIER_PLEIN_SORTIE : integer;

loop
   await immediate REMPLIR_FIN;
   emit PANIER_PLEIN_SORTIE(?REMPLIR_FIN);
   pause;
   emit FIN(?REMPLIR_FIN)
end loop

end module

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

module Robot :

inputoutput  PANIER_PLEIN_ENTREE : integer;
inputoutput VIDER_ENTREE;
inputoutput  PANIER_PLEIN_SORTIE : integer;
inputoutput REMPLIR_SORTIE : integer;

function alea (integer) : integer;

var x := -1 : integer in  % x := -1 n'est pas util si ?PANIER_PLEIN_ENTREE >= 0
   loop			  % sinon ca demarre necessairement avec x = -1
      await immediate PANIER_PLEIN_ENTREE;
      x := ?PANIER_PLEIN_ENTREE;
      pause;
      emit VIDER_ENTREE;
      await (alea(3)) tick;
      await immediate [not PANIER_PLEIN_SORTIE];
      pause;
      emit REMPLIR_SORTIE(x);
      x := -1;		  % x := -1 n'est pas util si ?PANIER_PLEIN_ENTREE >= 0
      pause
   end loop
end var

end module

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

module Examen_Esterel :

inputoutput REMPLIR_DEBUT : integer,
      REMPLIR_A : integer,
      REMPLIR_B : integer,
      REMPLIR_FIN : integer;

inputoutput PANIER_PLEIN_DEBUT : integer,
       PANIER_PLEIN_A : integer,
       PANIER_PLEIN_B : integer,
       PANIER_PLEIN_SORTIE : integer;

inputoutput VIDER_DEBUT, VIDER_A, VIDER_B, VIDER_C;

inputoutput FIN : integer;

run Panier[signal REMPLIR_DEBUT / REMPLIR,
                        PANIER_PLEIN_DEBUT / PANIER_PLEIN,
                        VIDER_DEBUT / VIDER]
||
run Panier[signal REMPLIR_A / REMPLIR,
                        PANIER_PLEIN_A / PANIER_PLEIN,
                        VIDER_A / VIDER]
||
run Panier[signal REMPLIR_B / REMPLIR,
                        PANIER_PLEIN_B / PANIER_PLEIN,
                        VIDER_B / VIDER]
||
run Panier_FIN
||
run Robot[signal PANIER_PLEIN_DEBUT / PANIER_PLEIN_ENTREE,
                 VIDER_DEBUT / VIDER_ENTREE,
                 PANIER_PLEIN_A / PANIER_PLEIN_SORTIE,
                 REMPLIR_A / REMPLIR_SORTIE]
||
run Robot[signal PANIER_PLEIN_A / PANIER_PLEIN_ENTREE,
                 VIDER_A / VIDER_ENTREE,
                 PANIER_PLEIN_B / PANIER_PLEIN_SORTIE,
                 REMPLIR_B / REMPLIR_SORTIE]
||
run Robot[signal PANIER_PLEIN_B / PANIER_PLEIN_ENTREE,
                 VIDER_B / VIDER_ENTREE,
                 PANIER_PLEIN_SORTIE / PANIER_PLEIN_SORTIE,
                 REMPLIR_FIN / REMPLIR_SORTIE]

end module

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%{

$ Examen_Esterel 
Examen_Esterel> REMPLIR_DEBUT(1);
--- Output: REMPLIR_DEBUT(1) PANIER_PLEIN_DEBUT(1) 
Examen_Esterel> ;
--- Output: VIDER_DEBUT 
Examen_Esterel> REMPLIR_DEBUT(2);;;;;;;;;;;;;;;;;;
--- Output: REMPLIR_DEBUT(2) PANIER_PLEIN_DEBUT(2) 
--- Output: PANIER_PLEIN_DEBUT(2) 
--- Output: REMPLIR_A(1) PANIER_PLEIN_DEBUT(2) PANIER_PLEIN_A(1) 
--- Output: PANIER_PLEIN_DEBUT(2) VIDER_A 
--- Output: VIDER_DEBUT 
--- Output: REMPLIR_B(1) PANIER_PLEIN_B(1) 
--- Output: VIDER_B 
--- Output: REMPLIR_A(2) PANIER_PLEIN_A(2) 
--- Output: VIDER_A 
--- Output: REMPLIR_FIN(1) PANIER_PLEIN_SORTIE(1) 
--- Output: FIN(1) 
--- Output: REMPLIR_B(2) PANIER_PLEIN_B(2) 
--- Output: VIDER_B 
--- Output: 
--- Output: REMPLIR_FIN(2) PANIER_PLEIN_SORTIE(2) 
--- Output: FIN(2) 
--- Output: 
--- Output: 
Examen_Esterel>

}%
